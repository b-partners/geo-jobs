/*
 * Image Annotation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package app.bpartners.annotator.endpoint.rest.api;

import app.bpartners.annotator.endpoint.rest.OpenapiGenerated;
import app.bpartners.annotator.endpoint.rest.client.ApiClient;
import app.bpartners.annotator.endpoint.rest.client.ApiException;
import app.bpartners.annotator.endpoint.rest.client.ApiResponse;
import app.bpartners.annotator.endpoint.rest.client.Pair;
import app.bpartners.annotator.endpoint.rest.model.AnnotationBatch;
import app.bpartners.annotator.endpoint.rest.model.AnnotationBatchReview;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.StringJoiner;
import java.util.function.Consumer;

@OpenapiGenerated
public class AnnotationsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public AnnotationsApi() {
    this(new ApiClient());
  }

  public AnnotationsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response)
      throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * create or update(if id is given) review concerning an annotation
   *
   * @param jobId (required)
   * @param taskId (required)
   * @param annotationBatchId (required)
   * @param reviewId (required)
   * @param annotationBatchReview a review (required)
   * @return AnnotationBatchReview
   * @throws ApiException if fails to make API call
   */
  public AnnotationBatchReview crupdateJobTaskAnnotationReview(
      String jobId,
      String taskId,
      String annotationBatchId,
      String reviewId,
      AnnotationBatchReview annotationBatchReview)
      throws ApiException {
    ApiResponse<AnnotationBatchReview> localVarResponse =
        crupdateJobTaskAnnotationReviewWithHttpInfo(
            jobId, taskId, annotationBatchId, reviewId, annotationBatchReview);
    return localVarResponse.getData();
  }

  /**
   * create or update(if id is given) review concerning an annotation
   *
   * @param jobId (required)
   * @param taskId (required)
   * @param annotationBatchId (required)
   * @param reviewId (required)
   * @param annotationBatchReview a review (required)
   * @return ApiResponse&lt;AnnotationBatchReview&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AnnotationBatchReview> crupdateJobTaskAnnotationReviewWithHttpInfo(
      String jobId,
      String taskId,
      String annotationBatchId,
      String reviewId,
      AnnotationBatchReview annotationBatchReview)
      throws ApiException {
    HttpRequest.Builder localVarRequestBuilder =
        crupdateJobTaskAnnotationReviewRequestBuilder(
            jobId, taskId, annotationBatchId, reviewId, annotationBatchReview);
    try {
      HttpResponse<InputStream> localVarResponse =
          memberVarHttpClient.send(
              localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode() / 100 != 2) {
        throw getApiException("crupdateJobTaskAnnotationReview", localVarResponse);
      }
      return new ApiResponse<AnnotationBatchReview>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(
              localVarResponse.body(), new TypeReference<AnnotationBatchReview>() {}));
    } catch (IOException e) {
      throw new ApiException(e);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder crupdateJobTaskAnnotationReviewRequestBuilder(
      String jobId,
      String taskId,
      String annotationBatchId,
      String reviewId,
      AnnotationBatchReview annotationBatchReview)
      throws ApiException {
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'jobId' when calling crupdateJobTaskAnnotationReview");
    }
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'taskId' when calling crupdateJobTaskAnnotationReview");
    }
    // verify the required parameter 'annotationBatchId' is set
    if (annotationBatchId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'annotationBatchId' when calling"
              + " crupdateJobTaskAnnotationReview");
    }
    // verify the required parameter 'reviewId' is set
    if (reviewId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'reviewId' when calling crupdateJobTaskAnnotationReview");
    }
    // verify the required parameter 'annotationBatchReview' is set
    if (annotationBatchReview == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'annotationBatchReview' when calling"
              + " crupdateJobTaskAnnotationReview");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath =
        "/jobs/{jobId}/tasks/{taskId}/annotations/{annotationBatchId}/reviews/{reviewId}"
            .replace("{jobId}", ApiClient.urlEncode(jobId.toString()))
            .replace("{taskId}", ApiClient.urlEncode(taskId.toString()))
            .replace("{annotationBatchId}", ApiClient.urlEncode(annotationBatchId.toString()))
            .replace("{reviewId}", ApiClient.urlEncode(reviewId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(annotationBatchReview);
      localVarRequestBuilder.method(
          "PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * get annotationBatch made on a task
   *
   * @param jobId (required)
   * @param taskId (required)
   * @param annotationBatchId (required)
   * @return AnnotationBatch
   * @throws ApiException if fails to make API call
   */
  public AnnotationBatch getAnnotationBatchByJobTaskAndId(
      String jobId, String taskId, String annotationBatchId) throws ApiException {
    ApiResponse<AnnotationBatch> localVarResponse =
        getAnnotationBatchByJobTaskAndIdWithHttpInfo(jobId, taskId, annotationBatchId);
    return localVarResponse.getData();
  }

  /**
   * get annotationBatch made on a task
   *
   * @param jobId (required)
   * @param taskId (required)
   * @param annotationBatchId (required)
   * @return ApiResponse&lt;AnnotationBatch&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AnnotationBatch> getAnnotationBatchByJobTaskAndIdWithHttpInfo(
      String jobId, String taskId, String annotationBatchId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder =
        getAnnotationBatchByJobTaskAndIdRequestBuilder(jobId, taskId, annotationBatchId);
    try {
      HttpResponse<InputStream> localVarResponse =
          memberVarHttpClient.send(
              localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode() / 100 != 2) {
        throw getApiException("getAnnotationBatchByJobTaskAndId", localVarResponse);
      }
      return new ApiResponse<AnnotationBatch>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(
              localVarResponse.body(), new TypeReference<AnnotationBatch>() {}));
    } catch (IOException e) {
      throw new ApiException(e);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAnnotationBatchByJobTaskAndIdRequestBuilder(
      String jobId, String taskId, String annotationBatchId) throws ApiException {
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'jobId' when calling getAnnotationBatchByJobTaskAndId");
    }
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'taskId' when calling getAnnotationBatchByJobTaskAndId");
    }
    // verify the required parameter 'annotationBatchId' is set
    if (annotationBatchId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'annotationBatchId' when calling"
              + " getAnnotationBatchByJobTaskAndId");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath =
        "/jobs/{jobId}/tasks/{taskId}/annotations/{annotationBatchId}"
            .replace("{jobId}", ApiClient.urlEncode(jobId.toString()))
            .replace("{taskId}", ApiClient.urlEncode(taskId.toString()))
            .replace("{annotationBatchId}", ApiClient.urlEncode(annotationBatchId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * gets annotations made on a task
   *
   * @param jobId (required)
   * @param taskId (required)
   * @param page (optional)
   * @param pageSize (optional)
   * @return List&lt;AnnotationBatch&gt;
   * @throws ApiException if fails to make API call
   */
  public List<AnnotationBatch> getAnnotationBatchesByJobTask(
      String jobId, String taskId, Integer page, Integer pageSize) throws ApiException {
    ApiResponse<List<AnnotationBatch>> localVarResponse =
        getAnnotationBatchesByJobTaskWithHttpInfo(jobId, taskId, page, pageSize);
    return localVarResponse.getData();
  }

  /**
   * gets annotations made on a task
   *
   * @param jobId (required)
   * @param taskId (required)
   * @param page (optional)
   * @param pageSize (optional)
   * @return ApiResponse&lt;List&lt;AnnotationBatch&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<AnnotationBatch>> getAnnotationBatchesByJobTaskWithHttpInfo(
      String jobId, String taskId, Integer page, Integer pageSize) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder =
        getAnnotationBatchesByJobTaskRequestBuilder(jobId, taskId, page, pageSize);
    try {
      HttpResponse<InputStream> localVarResponse =
          memberVarHttpClient.send(
              localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode() / 100 != 2) {
        throw getApiException("getAnnotationBatchesByJobTask", localVarResponse);
      }
      return new ApiResponse<List<AnnotationBatch>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(
              localVarResponse.body(), new TypeReference<List<AnnotationBatch>>() {}));
    } catch (IOException e) {
      throw new ApiException(e);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAnnotationBatchesByJobTaskRequestBuilder(
      String jobId, String taskId, Integer page, Integer pageSize) throws ApiException {
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'jobId' when calling getAnnotationBatchesByJobTask");
    }
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'taskId' when calling getAnnotationBatchesByJobTask");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath =
        "/jobs/{jobId}/tasks/{taskId}/annotations"
            .replace("{jobId}", ApiClient.urlEncode(jobId.toString()))
            .replace("{taskId}", ApiClient.urlEncode(taskId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(
          URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * get a specific review
   *
   * @param jobId (required)
   * @param taskId (required)
   * @param annotationBatchId (required)
   * @param reviewId (required)
   * @return AnnotationBatchReview
   * @throws ApiException if fails to make API call
   */
  public AnnotationBatchReview getJobTaskAnnotationBatchReview(
      String jobId, String taskId, String annotationBatchId, String reviewId) throws ApiException {
    ApiResponse<AnnotationBatchReview> localVarResponse =
        getJobTaskAnnotationBatchReviewWithHttpInfo(jobId, taskId, annotationBatchId, reviewId);
    return localVarResponse.getData();
  }

  /**
   * get a specific review
   *
   * @param jobId (required)
   * @param taskId (required)
   * @param annotationBatchId (required)
   * @param reviewId (required)
   * @return ApiResponse&lt;AnnotationBatchReview&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AnnotationBatchReview> getJobTaskAnnotationBatchReviewWithHttpInfo(
      String jobId, String taskId, String annotationBatchId, String reviewId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder =
        getJobTaskAnnotationBatchReviewRequestBuilder(jobId, taskId, annotationBatchId, reviewId);
    try {
      HttpResponse<InputStream> localVarResponse =
          memberVarHttpClient.send(
              localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode() / 100 != 2) {
        throw getApiException("getJobTaskAnnotationBatchReview", localVarResponse);
      }
      return new ApiResponse<AnnotationBatchReview>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(
              localVarResponse.body(), new TypeReference<AnnotationBatchReview>() {}));
    } catch (IOException e) {
      throw new ApiException(e);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getJobTaskAnnotationBatchReviewRequestBuilder(
      String jobId, String taskId, String annotationBatchId, String reviewId) throws ApiException {
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'jobId' when calling getJobTaskAnnotationBatchReview");
    }
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'taskId' when calling getJobTaskAnnotationBatchReview");
    }
    // verify the required parameter 'annotationBatchId' is set
    if (annotationBatchId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'annotationBatchId' when calling"
              + " getJobTaskAnnotationBatchReview");
    }
    // verify the required parameter 'reviewId' is set
    if (reviewId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'reviewId' when calling getJobTaskAnnotationBatchReview");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath =
        "/jobs/{jobId}/tasks/{taskId}/annotations/{annotationBatchId}/reviews/{reviewId}"
            .replace("{jobId}", ApiClient.urlEncode(jobId.toString()))
            .replace("{taskId}", ApiClient.urlEncode(taskId.toString()))
            .replace("{annotationBatchId}", ApiClient.urlEncode(annotationBatchId.toString()))
            .replace("{reviewId}", ApiClient.urlEncode(reviewId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * get all reviews of an annotation batch
   *
   * @param jobId (required)
   * @param taskId (required)
   * @param annotationBatchId (required)
   * @return List&lt;AnnotationBatchReview&gt;
   * @throws ApiException if fails to make API call
   */
  public List<AnnotationBatchReview> getJobTaskAnnotationBatchReviews(
      String jobId, String taskId, String annotationBatchId) throws ApiException {
    ApiResponse<List<AnnotationBatchReview>> localVarResponse =
        getJobTaskAnnotationBatchReviewsWithHttpInfo(jobId, taskId, annotationBatchId);
    return localVarResponse.getData();
  }

  /**
   * get all reviews of an annotation batch
   *
   * @param jobId (required)
   * @param taskId (required)
   * @param annotationBatchId (required)
   * @return ApiResponse&lt;List&lt;AnnotationBatchReview&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<AnnotationBatchReview>> getJobTaskAnnotationBatchReviewsWithHttpInfo(
      String jobId, String taskId, String annotationBatchId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder =
        getJobTaskAnnotationBatchReviewsRequestBuilder(jobId, taskId, annotationBatchId);
    try {
      HttpResponse<InputStream> localVarResponse =
          memberVarHttpClient.send(
              localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode() / 100 != 2) {
        throw getApiException("getJobTaskAnnotationBatchReviews", localVarResponse);
      }
      return new ApiResponse<List<AnnotationBatchReview>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(
              localVarResponse.body(), new TypeReference<List<AnnotationBatchReview>>() {}));
    } catch (IOException e) {
      throw new ApiException(e);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getJobTaskAnnotationBatchReviewsRequestBuilder(
      String jobId, String taskId, String annotationBatchId) throws ApiException {
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'jobId' when calling getJobTaskAnnotationBatchReviews");
    }
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'taskId' when calling getJobTaskAnnotationBatchReviews");
    }
    // verify the required parameter 'annotationBatchId' is set
    if (annotationBatchId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'annotationBatchId' when calling"
              + " getJobTaskAnnotationBatchReviews");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath =
        "/jobs/{jobId}/tasks/{taskId}/annotations/{annotationBatchId}/reviews"
            .replace("{jobId}", ApiClient.urlEncode(jobId.toString()))
            .replace("{taskId}", ApiClient.urlEncode(taskId.toString()))
            .replace("{annotationBatchId}", ApiClient.urlEncode(annotationBatchId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
