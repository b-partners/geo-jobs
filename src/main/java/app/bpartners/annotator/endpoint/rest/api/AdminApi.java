/*
 * Image Annotation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package app.bpartners.annotator.endpoint.rest.api;

import app.bpartners.annotator.endpoint.rest.OpenapiGenerated;
import app.bpartners.annotator.endpoint.rest.client.ApiClient;
import app.bpartners.annotator.endpoint.rest.client.ApiException;
import app.bpartners.annotator.endpoint.rest.client.ApiResponse;
import app.bpartners.annotator.endpoint.rest.client.Pair;
import app.bpartners.annotator.endpoint.rest.model.AnnotationBatch;
import app.bpartners.annotator.endpoint.rest.model.AnnotationBatchReview;
import app.bpartners.annotator.endpoint.rest.model.CreateTeam;
import app.bpartners.annotator.endpoint.rest.model.CreateUser;
import app.bpartners.annotator.endpoint.rest.model.CrupdateAnnotatedJob;
import app.bpartners.annotator.endpoint.rest.model.CrupdateJob;
import app.bpartners.annotator.endpoint.rest.model.ExportFormat;
import app.bpartners.annotator.endpoint.rest.model.Job;
import app.bpartners.annotator.endpoint.rest.model.JobStatus;
import app.bpartners.annotator.endpoint.rest.model.Task;
import app.bpartners.annotator.endpoint.rest.model.TaskStatus;
import app.bpartners.annotator.endpoint.rest.model.Team;
import app.bpartners.annotator.endpoint.rest.model.TeamUser;
import app.bpartners.annotator.endpoint.rest.model.User;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.StringJoiner;
import java.util.function.Consumer;

@OpenapiGenerated
public class AdminApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public AdminApi() {
    this(new ApiClient());
  }

  public AdminApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response)
      throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Create teams
   *
   * @param createTeam (optional
   * @return List&lt;Team&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Team> createTeams(List<CreateTeam> createTeam) throws ApiException {
    ApiResponse<List<Team>> localVarResponse = createTeamsWithHttpInfo(createTeam);
    return localVarResponse.getData();
  }

  /**
   * Create teams
   *
   * @param createTeam (optional
   * @return ApiResponse&lt;List&lt;Team&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Team>> createTeamsWithHttpInfo(List<CreateTeam> createTeam)
      throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createTeamsRequestBuilder(createTeam);
    try {
      HttpResponse<InputStream> localVarResponse =
          memberVarHttpClient.send(
              localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode() / 100 != 2) {
        throw getApiException("createTeams", localVarResponse);
      }
      return new ApiResponse<List<Team>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(
              localVarResponse.body(), new TypeReference<List<Team>>() {}));
    } catch (IOException e) {
      throw new ApiException(e);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createTeamsRequestBuilder(List<CreateTeam> createTeam)
      throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/teams";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createTeam);
      localVarRequestBuilder.method(
          "POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * create users
   *
   * @param createUser (optional
   * @return List&lt;User&gt;
   * @throws ApiException if fails to make API call
   */
  public List<User> createUsers(List<CreateUser> createUser) throws ApiException {
    ApiResponse<List<User>> localVarResponse = createUsersWithHttpInfo(createUser);
    return localVarResponse.getData();
  }

  /**
   * create users
   *
   * @param createUser (optional
   * @return ApiResponse&lt;List&lt;User&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<User>> createUsersWithHttpInfo(List<CreateUser> createUser)
      throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createUsersRequestBuilder(createUser);
    try {
      HttpResponse<InputStream> localVarResponse =
          memberVarHttpClient.send(
              localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode() / 100 != 2) {
        throw getApiException("createUsers", localVarResponse);
      }
      return new ApiResponse<List<User>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(
              localVarResponse.body(), new TypeReference<List<User>>() {}));
    } catch (IOException e) {
      throw new ApiException(e);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createUsersRequestBuilder(List<CreateUser> createUser)
      throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createUser);
      localVarRequestBuilder.method(
          "POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * create or update an annotated job
   *
   * @param jobId (required)
   * @param crupdateAnnotatedJob (optional)
   * @return Job
   * @throws ApiException if fails to make API call
   */
  public Job crupdateAnnotatedJob(String jobId, CrupdateAnnotatedJob crupdateAnnotatedJob)
      throws ApiException {
    ApiResponse<Job> localVarResponse =
        crupdateAnnotatedJobWithHttpInfo(jobId, crupdateAnnotatedJob);
    return localVarResponse.getData();
  }

  /**
   * create or update an annotated job
   *
   * @param jobId (required)
   * @param crupdateAnnotatedJob (optional)
   * @return ApiResponse&lt;Job&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Job> crupdateAnnotatedJobWithHttpInfo(
      String jobId, CrupdateAnnotatedJob crupdateAnnotatedJob) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder =
        crupdateAnnotatedJobRequestBuilder(jobId, crupdateAnnotatedJob);
    try {
      HttpResponse<InputStream> localVarResponse =
          memberVarHttpClient.send(
              localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode() / 100 != 2) {
        throw getApiException("crupdateAnnotatedJob", localVarResponse);
      }
      return new ApiResponse<Job>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Job>() {}));
    } catch (IOException e) {
      throw new ApiException(e);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder crupdateAnnotatedJobRequestBuilder(
      String jobId, CrupdateAnnotatedJob crupdateAnnotatedJob) throws ApiException {
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'jobId' when calling crupdateAnnotatedJob");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath =
        "/annotated-jobs/{jobId}".replace("{jobId}", ApiClient.urlEncode(jobId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(crupdateAnnotatedJob);
      localVarRequestBuilder.method(
          "PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * create or update(if id is given) review concerning an annotation
   *
   * @param jobId (required)
   * @param taskId (required)
   * @param annotationBatchId (required)
   * @param reviewId (required)
   * @param annotationBatchReview a review (required)
   * @return AnnotationBatchReview
   * @throws ApiException if fails to make API call
   */
  public AnnotationBatchReview crupdateJobTaskAnnotationReview(
      String jobId,
      String taskId,
      String annotationBatchId,
      String reviewId,
      AnnotationBatchReview annotationBatchReview)
      throws ApiException {
    ApiResponse<AnnotationBatchReview> localVarResponse =
        crupdateJobTaskAnnotationReviewWithHttpInfo(
            jobId, taskId, annotationBatchId, reviewId, annotationBatchReview);
    return localVarResponse.getData();
  }

  /**
   * create or update(if id is given) review concerning an annotation
   *
   * @param jobId (required)
   * @param taskId (required)
   * @param annotationBatchId (required)
   * @param reviewId (required)
   * @param annotationBatchReview a review (required)
   * @return ApiResponse&lt;AnnotationBatchReview&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AnnotationBatchReview> crupdateJobTaskAnnotationReviewWithHttpInfo(
      String jobId,
      String taskId,
      String annotationBatchId,
      String reviewId,
      AnnotationBatchReview annotationBatchReview)
      throws ApiException {
    HttpRequest.Builder localVarRequestBuilder =
        crupdateJobTaskAnnotationReviewRequestBuilder(
            jobId, taskId, annotationBatchId, reviewId, annotationBatchReview);
    try {
      HttpResponse<InputStream> localVarResponse =
          memberVarHttpClient.send(
              localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode() / 100 != 2) {
        throw getApiException("crupdateJobTaskAnnotationReview", localVarResponse);
      }
      return new ApiResponse<AnnotationBatchReview>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(
              localVarResponse.body(), new TypeReference<AnnotationBatchReview>() {}));
    } catch (IOException e) {
      throw new ApiException(e);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder crupdateJobTaskAnnotationReviewRequestBuilder(
      String jobId,
      String taskId,
      String annotationBatchId,
      String reviewId,
      AnnotationBatchReview annotationBatchReview)
      throws ApiException {
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'jobId' when calling crupdateJobTaskAnnotationReview");
    }
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'taskId' when calling crupdateJobTaskAnnotationReview");
    }
    // verify the required parameter 'annotationBatchId' is set
    if (annotationBatchId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'annotationBatchId' when calling"
              + " crupdateJobTaskAnnotationReview");
    }
    // verify the required parameter 'reviewId' is set
    if (reviewId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'reviewId' when calling crupdateJobTaskAnnotationReview");
    }
    // verify the required parameter 'annotationBatchReview' is set
    if (annotationBatchReview == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'annotationBatchReview' when calling"
              + " crupdateJobTaskAnnotationReview");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath =
        "/jobs/{jobId}/tasks/{taskId}/annotations/{annotationBatchId}/reviews/{reviewId}"
            .replace("{jobId}", ApiClient.urlEncode(jobId.toString()))
            .replace("{taskId}", ApiClient.urlEncode(taskId.toString()))
            .replace("{annotationBatchId}", ApiClient.urlEncode(annotationBatchId.toString()))
            .replace("{reviewId}", ApiClient.urlEncode(reviewId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(annotationBatchReview);
      localVarRequestBuilder.method(
          "PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * exports a job to COCO or VGG format
   *
   * @param jobId (required)
   * @param format (required)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String exportJob(String jobId, ExportFormat format) throws ApiException {
    ApiResponse<String> localVarResponse = exportJobWithHttpInfo(jobId, format);
    return localVarResponse.getData();
  }

  /**
   * exports a job to COCO or VGG format
   *
   * @param jobId (required)
   * @param format (required)
   * @return ApiResponse&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<String> exportJobWithHttpInfo(String jobId, ExportFormat format)
      throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportJobRequestBuilder(jobId, format);
    try {
      HttpResponse<InputStream> localVarResponse =
          memberVarHttpClient.send(
              localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode() / 100 != 2) {
        throw getApiException("exportJob", localVarResponse);
      }
      return new ApiResponse<String>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {}));
    } catch (IOException e) {
      throw new ApiException(e);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportJobRequestBuilder(String jobId, ExportFormat format)
      throws ApiException {
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(400, "Missing the required parameter 'jobId' when calling exportJob");
    }
    // verify the required parameter 'format' is set
    if (format == null) {
      throw new ApiException(400, "Missing the required parameter 'format' when calling exportJob");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath =
        "/jobs/{jobId}/export".replace("{jobId}", ApiClient.urlEncode(jobId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(
          URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * get annotationBatch made on a task
   *
   * @param jobId (required)
   * @param taskId (required)
   * @param annotationBatchId (required)
   * @return AnnotationBatch
   * @throws ApiException if fails to make API call
   */
  public AnnotationBatch getAnnotationBatchByJobTaskAndId(
      String jobId, String taskId, String annotationBatchId) throws ApiException {
    ApiResponse<AnnotationBatch> localVarResponse =
        getAnnotationBatchByJobTaskAndIdWithHttpInfo(jobId, taskId, annotationBatchId);
    return localVarResponse.getData();
  }

  /**
   * get annotationBatch made on a task
   *
   * @param jobId (required)
   * @param taskId (required)
   * @param annotationBatchId (required)
   * @return ApiResponse&lt;AnnotationBatch&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AnnotationBatch> getAnnotationBatchByJobTaskAndIdWithHttpInfo(
      String jobId, String taskId, String annotationBatchId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder =
        getAnnotationBatchByJobTaskAndIdRequestBuilder(jobId, taskId, annotationBatchId);
    try {
      HttpResponse<InputStream> localVarResponse =
          memberVarHttpClient.send(
              localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode() / 100 != 2) {
        throw getApiException("getAnnotationBatchByJobTaskAndId", localVarResponse);
      }
      return new ApiResponse<AnnotationBatch>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(
              localVarResponse.body(), new TypeReference<AnnotationBatch>() {}));
    } catch (IOException e) {
      throw new ApiException(e);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAnnotationBatchByJobTaskAndIdRequestBuilder(
      String jobId, String taskId, String annotationBatchId) throws ApiException {
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'jobId' when calling getAnnotationBatchByJobTaskAndId");
    }
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'taskId' when calling getAnnotationBatchByJobTaskAndId");
    }
    // verify the required parameter 'annotationBatchId' is set
    if (annotationBatchId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'annotationBatchId' when calling"
              + " getAnnotationBatchByJobTaskAndId");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath =
        "/jobs/{jobId}/tasks/{taskId}/annotations/{annotationBatchId}"
            .replace("{jobId}", ApiClient.urlEncode(jobId.toString()))
            .replace("{taskId}", ApiClient.urlEncode(taskId.toString()))
            .replace("{annotationBatchId}", ApiClient.urlEncode(annotationBatchId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * gets annotations made on a task
   *
   * @param jobId (required)
   * @param taskId (required)
   * @param page (optional)
   * @param pageSize (optional)
   * @return List&lt;AnnotationBatch&gt;
   * @throws ApiException if fails to make API call
   */
  public List<AnnotationBatch> getAnnotationBatchesByJobTask(
      String jobId, String taskId, Integer page, Integer pageSize) throws ApiException {
    ApiResponse<List<AnnotationBatch>> localVarResponse =
        getAnnotationBatchesByJobTaskWithHttpInfo(jobId, taskId, page, pageSize);
    return localVarResponse.getData();
  }

  /**
   * gets annotations made on a task
   *
   * @param jobId (required)
   * @param taskId (required)
   * @param page (optional)
   * @param pageSize (optional)
   * @return ApiResponse&lt;List&lt;AnnotationBatch&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<AnnotationBatch>> getAnnotationBatchesByJobTaskWithHttpInfo(
      String jobId, String taskId, Integer page, Integer pageSize) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder =
        getAnnotationBatchesByJobTaskRequestBuilder(jobId, taskId, page, pageSize);
    try {
      HttpResponse<InputStream> localVarResponse =
          memberVarHttpClient.send(
              localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode() / 100 != 2) {
        throw getApiException("getAnnotationBatchesByJobTask", localVarResponse);
      }
      return new ApiResponse<List<AnnotationBatch>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(
              localVarResponse.body(), new TypeReference<List<AnnotationBatch>>() {}));
    } catch (IOException e) {
      throw new ApiException(e);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAnnotationBatchesByJobTaskRequestBuilder(
      String jobId, String taskId, Integer page, Integer pageSize) throws ApiException {
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'jobId' when calling getAnnotationBatchesByJobTask");
    }
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'taskId' when calling getAnnotationBatchesByJobTask");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath =
        "/jobs/{jobId}/tasks/{taskId}/annotations"
            .replace("{jobId}", ApiClient.urlEncode(jobId.toString()))
            .replace("{taskId}", ApiClient.urlEncode(taskId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(
          URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * get a job specified by its id
   *
   * @param jobId (required)
   * @return Job
   * @throws ApiException if fails to make API call
   */
  public Job getJob(String jobId) throws ApiException {
    ApiResponse<Job> localVarResponse = getJobWithHttpInfo(jobId);
    return localVarResponse.getData();
  }

  /**
   * get a job specified by its id
   *
   * @param jobId (required)
   * @return ApiResponse&lt;Job&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Job> getJobWithHttpInfo(String jobId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getJobRequestBuilder(jobId);
    try {
      HttpResponse<InputStream> localVarResponse =
          memberVarHttpClient.send(
              localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode() / 100 != 2) {
        throw getApiException("getJob", localVarResponse);
      }
      return new ApiResponse<Job>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Job>() {}));
    } catch (IOException e) {
      throw new ApiException(e);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getJobRequestBuilder(String jobId) throws ApiException {
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(400, "Missing the required parameter 'jobId' when calling getJob");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/jobs/{jobId}".replace("{jobId}", ApiClient.urlEncode(jobId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * get a specific review
   *
   * @param jobId (required)
   * @param taskId (required)
   * @param annotationBatchId (required)
   * @param reviewId (required)
   * @return AnnotationBatchReview
   * @throws ApiException if fails to make API call
   */
  public AnnotationBatchReview getJobTaskAnnotationBatchReview(
      String jobId, String taskId, String annotationBatchId, String reviewId) throws ApiException {
    ApiResponse<AnnotationBatchReview> localVarResponse =
        getJobTaskAnnotationBatchReviewWithHttpInfo(jobId, taskId, annotationBatchId, reviewId);
    return localVarResponse.getData();
  }

  /**
   * get a specific review
   *
   * @param jobId (required)
   * @param taskId (required)
   * @param annotationBatchId (required)
   * @param reviewId (required)
   * @return ApiResponse&lt;AnnotationBatchReview&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AnnotationBatchReview> getJobTaskAnnotationBatchReviewWithHttpInfo(
      String jobId, String taskId, String annotationBatchId, String reviewId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder =
        getJobTaskAnnotationBatchReviewRequestBuilder(jobId, taskId, annotationBatchId, reviewId);
    try {
      HttpResponse<InputStream> localVarResponse =
          memberVarHttpClient.send(
              localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode() / 100 != 2) {
        throw getApiException("getJobTaskAnnotationBatchReview", localVarResponse);
      }
      return new ApiResponse<AnnotationBatchReview>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(
              localVarResponse.body(), new TypeReference<AnnotationBatchReview>() {}));
    } catch (IOException e) {
      throw new ApiException(e);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getJobTaskAnnotationBatchReviewRequestBuilder(
      String jobId, String taskId, String annotationBatchId, String reviewId) throws ApiException {
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'jobId' when calling getJobTaskAnnotationBatchReview");
    }
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'taskId' when calling getJobTaskAnnotationBatchReview");
    }
    // verify the required parameter 'annotationBatchId' is set
    if (annotationBatchId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'annotationBatchId' when calling"
              + " getJobTaskAnnotationBatchReview");
    }
    // verify the required parameter 'reviewId' is set
    if (reviewId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'reviewId' when calling getJobTaskAnnotationBatchReview");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath =
        "/jobs/{jobId}/tasks/{taskId}/annotations/{annotationBatchId}/reviews/{reviewId}"
            .replace("{jobId}", ApiClient.urlEncode(jobId.toString()))
            .replace("{taskId}", ApiClient.urlEncode(taskId.toString()))
            .replace("{annotationBatchId}", ApiClient.urlEncode(annotationBatchId.toString()))
            .replace("{reviewId}", ApiClient.urlEncode(reviewId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * get all reviews of an annotation batch
   *
   * @param jobId (required)
   * @param taskId (required)
   * @param annotationBatchId (required)
   * @return List&lt;AnnotationBatchReview&gt;
   * @throws ApiException if fails to make API call
   */
  public List<AnnotationBatchReview> getJobTaskAnnotationBatchReviews(
      String jobId, String taskId, String annotationBatchId) throws ApiException {
    ApiResponse<List<AnnotationBatchReview>> localVarResponse =
        getJobTaskAnnotationBatchReviewsWithHttpInfo(jobId, taskId, annotationBatchId);
    return localVarResponse.getData();
  }

  /**
   * get all reviews of an annotation batch
   *
   * @param jobId (required)
   * @param taskId (required)
   * @param annotationBatchId (required)
   * @return ApiResponse&lt;List&lt;AnnotationBatchReview&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<AnnotationBatchReview>> getJobTaskAnnotationBatchReviewsWithHttpInfo(
      String jobId, String taskId, String annotationBatchId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder =
        getJobTaskAnnotationBatchReviewsRequestBuilder(jobId, taskId, annotationBatchId);
    try {
      HttpResponse<InputStream> localVarResponse =
          memberVarHttpClient.send(
              localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode() / 100 != 2) {
        throw getApiException("getJobTaskAnnotationBatchReviews", localVarResponse);
      }
      return new ApiResponse<List<AnnotationBatchReview>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(
              localVarResponse.body(), new TypeReference<List<AnnotationBatchReview>>() {}));
    } catch (IOException e) {
      throw new ApiException(e);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getJobTaskAnnotationBatchReviewsRequestBuilder(
      String jobId, String taskId, String annotationBatchId) throws ApiException {
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'jobId' when calling getJobTaskAnnotationBatchReviews");
    }
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'taskId' when calling getJobTaskAnnotationBatchReviews");
    }
    // verify the required parameter 'annotationBatchId' is set
    if (annotationBatchId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'annotationBatchId' when calling"
              + " getJobTaskAnnotationBatchReviews");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath =
        "/jobs/{jobId}/tasks/{taskId}/annotations/{annotationBatchId}/reviews"
            .replace("{jobId}", ApiClient.urlEncode(jobId.toString()))
            .replace("{taskId}", ApiClient.urlEncode(taskId.toString()))
            .replace("{annotationBatchId}", ApiClient.urlEncode(annotationBatchId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * gets information about a task
   *
   * @param jobId (required)
   * @param taskId (required)
   * @return Task
   * @throws ApiException if fails to make API call
   */
  public Task getJobTaskById(String jobId, String taskId) throws ApiException {
    ApiResponse<Task> localVarResponse = getJobTaskByIdWithHttpInfo(jobId, taskId);
    return localVarResponse.getData();
  }

  /**
   * gets information about a task
   *
   * @param jobId (required)
   * @param taskId (required)
   * @return ApiResponse&lt;Task&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Task> getJobTaskByIdWithHttpInfo(String jobId, String taskId)
      throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getJobTaskByIdRequestBuilder(jobId, taskId);
    try {
      HttpResponse<InputStream> localVarResponse =
          memberVarHttpClient.send(
              localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode() / 100 != 2) {
        throw getApiException("getJobTaskById", localVarResponse);
      }
      return new ApiResponse<Task>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Task>() {}));
    } catch (IOException e) {
      throw new ApiException(e);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getJobTaskByIdRequestBuilder(String jobId, String taskId)
      throws ApiException {
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'jobId' when calling getJobTaskById");
    }
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'taskId' when calling getJobTaskById");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath =
        "/jobs/{jobId}/tasks/{taskId}"
            .replace("{jobId}", ApiClient.urlEncode(jobId.toString()))
            .replace("{taskId}", ApiClient.urlEncode(taskId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * gets information about a task
   *
   * @param jobId (required)
   * @param page (optional)
   * @param pageSize (optional)
   * @param status (optional)
   * @param userId (optional)
   * @return List&lt;Task&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Task> getJobTasks(
      String jobId, Integer page, Integer pageSize, TaskStatus status, String userId)
      throws ApiException {
    ApiResponse<List<Task>> localVarResponse =
        getJobTasksWithHttpInfo(jobId, page, pageSize, status, userId);
    return localVarResponse.getData();
  }

  /**
   * gets information about a task
   *
   * @param jobId (required)
   * @param page (optional)
   * @param pageSize (optional)
   * @param status (optional)
   * @param userId (optional)
   * @return ApiResponse&lt;List&lt;Task&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Task>> getJobTasksWithHttpInfo(
      String jobId, Integer page, Integer pageSize, TaskStatus status, String userId)
      throws ApiException {
    HttpRequest.Builder localVarRequestBuilder =
        getJobTasksRequestBuilder(jobId, page, pageSize, status, userId);
    try {
      HttpResponse<InputStream> localVarResponse =
          memberVarHttpClient.send(
              localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode() / 100 != 2) {
        throw getApiException("getJobTasks", localVarResponse);
      }
      return new ApiResponse<List<Task>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(
              localVarResponse.body(), new TypeReference<List<Task>>() {}));
    } catch (IOException e) {
      throw new ApiException(e);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getJobTasksRequestBuilder(
      String jobId, Integer page, Integer pageSize, TaskStatus status, String userId)
      throws ApiException {
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'jobId' when calling getJobTasks");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath =
        "/jobs/{jobId}/tasks".replace("{jobId}", ApiClient.urlEncode(jobId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status", status));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(
          URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get all jobs
   *
   * @param page (optional)
   * @param pageSize (optional)
   * @param status (optional)
   * @return List&lt;Job&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Job> getJobs(Integer page, Integer pageSize, JobStatus status) throws ApiException {
    ApiResponse<List<Job>> localVarResponse = getJobsWithHttpInfo(page, pageSize, status);
    return localVarResponse.getData();
  }

  /**
   * Get all jobs
   *
   * @param page (optional)
   * @param pageSize (optional)
   * @param status (optional)
   * @return ApiResponse&lt;List&lt;Job&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Job>> getJobsWithHttpInfo(
      Integer page, Integer pageSize, JobStatus status) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getJobsRequestBuilder(page, pageSize, status);
    try {
      HttpResponse<InputStream> localVarResponse =
          memberVarHttpClient.send(
              localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode() / 100 != 2) {
        throw getApiException("getJobs", localVarResponse);
      }
      return new ApiResponse<List<Job>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(
              localVarResponse.body(), new TypeReference<List<Job>>() {}));
    } catch (IOException e) {
      throw new ApiException(e);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getJobsRequestBuilder(
      Integer page, Integer pageSize, JobStatus status) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/jobs";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status", status));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(
          URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get the list of existing teams
   *
   * @param page (optional)
   * @param pageSize (optional)
   * @return List&lt;Team&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Team> getTeams(Integer page, Integer pageSize) throws ApiException {
    ApiResponse<List<Team>> localVarResponse = getTeamsWithHttpInfo(page, pageSize);
    return localVarResponse.getData();
  }

  /**
   * Get the list of existing teams
   *
   * @param page (optional)
   * @param pageSize (optional)
   * @return ApiResponse&lt;List&lt;Team&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Team>> getTeamsWithHttpInfo(Integer page, Integer pageSize)
      throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getTeamsRequestBuilder(page, pageSize);
    try {
      HttpResponse<InputStream> localVarResponse =
          memberVarHttpClient.send(
              localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode() / 100 != 2) {
        throw getApiException("getTeams", localVarResponse);
      }
      return new ApiResponse<List<Team>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(
              localVarResponse.body(), new TypeReference<List<Team>>() {}));
    } catch (IOException e) {
      throw new ApiException(e);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getTeamsRequestBuilder(Integer page, Integer pageSize)
      throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/teams";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(
          URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * get all users.
   *
   * @param page (optional)
   * @param pageSize (optional)
   * @return List&lt;User&gt;
   * @throws ApiException if fails to make API call
   */
  public List<User> getUsers(Integer page, Integer pageSize) throws ApiException {
    ApiResponse<List<User>> localVarResponse = getUsersWithHttpInfo(page, pageSize);
    return localVarResponse.getData();
  }

  /**
   * get all users.
   *
   * @param page (optional)
   * @param pageSize (optional)
   * @return ApiResponse&lt;List&lt;User&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<User>> getUsersWithHttpInfo(Integer page, Integer pageSize)
      throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getUsersRequestBuilder(page, pageSize);
    try {
      HttpResponse<InputStream> localVarResponse =
          memberVarHttpClient.send(
              localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode() / 100 != 2) {
        throw getApiException("getUsers", localVarResponse);
      }
      return new ApiResponse<List<User>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(
              localVarResponse.body(), new TypeReference<List<User>>() {}));
    } catch (IOException e) {
      throw new ApiException(e);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getUsersRequestBuilder(Integer page, Integer pageSize)
      throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(
          URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create or update a job
   *
   * @param jobId (required)
   * @param crupdateJob (optional)
   * @return Job
   * @throws ApiException if fails to make API call
   */
  public Job saveJob(String jobId, CrupdateJob crupdateJob) throws ApiException {
    ApiResponse<Job> localVarResponse = saveJobWithHttpInfo(jobId, crupdateJob);
    return localVarResponse.getData();
  }

  /**
   * Create or update a job
   *
   * @param jobId (required)
   * @param crupdateJob (optional)
   * @return ApiResponse&lt;Job&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Job> saveJobWithHttpInfo(String jobId, CrupdateJob crupdateJob)
      throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = saveJobRequestBuilder(jobId, crupdateJob);
    try {
      HttpResponse<InputStream> localVarResponse =
          memberVarHttpClient.send(
              localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode() / 100 != 2) {
        throw getApiException("saveJob", localVarResponse);
      }
      return new ApiResponse<Job>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Job>() {}));
    } catch (IOException e) {
      throw new ApiException(e);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder saveJobRequestBuilder(String jobId, CrupdateJob crupdateJob)
      throws ApiException {
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(400, "Missing the required parameter 'jobId' when calling saveJob");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/jobs/{jobId}".replace("{jobId}", ApiClient.urlEncode(jobId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(crupdateJob);
      localVarRequestBuilder.method(
          "PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update team of an user update user&#39;s team
   *
   * @param userId (required)
   * @param teamUser (optional)
   * @return User
   * @throws ApiException if fails to make API call
   */
  public User updateUserTeam(String userId, TeamUser teamUser) throws ApiException {
    ApiResponse<User> localVarResponse = updateUserTeamWithHttpInfo(userId, teamUser);
    return localVarResponse.getData();
  }

  /**
   * Update team of an user update user&#39;s team
   *
   * @param userId (required)
   * @param teamUser (optional)
   * @return ApiResponse&lt;User&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<User> updateUserTeamWithHttpInfo(String userId, TeamUser teamUser)
      throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateUserTeamRequestBuilder(userId, teamUser);
    try {
      HttpResponse<InputStream> localVarResponse =
          memberVarHttpClient.send(
              localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode() / 100 != 2) {
        throw getApiException("updateUserTeam", localVarResponse);
      }
      return new ApiResponse<User>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<User>() {}));
    } catch (IOException e) {
      throw new ApiException(e);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateUserTeamRequestBuilder(String userId, TeamUser teamUser)
      throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'userId' when calling updateUserTeam");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath =
        "/users/{userId}/team".replace("{userId}", ApiClient.urlEncode(userId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(teamUser);
      localVarRequestBuilder.method(
          "PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
