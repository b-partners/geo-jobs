/*
 * Image Annotation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package app.bpartners.gen.annotator.endpoint.rest.api;

import app.bpartners.gen.annotator.endpoint.rest.OpenapiGenerated;
import app.bpartners.gen.annotator.endpoint.rest.client.ApiClient;
import app.bpartners.gen.annotator.endpoint.rest.client.ApiException;
import app.bpartners.gen.annotator.endpoint.rest.client.ApiResponse;
import app.bpartners.gen.annotator.endpoint.rest.model.AnnotationBatch;
import app.bpartners.gen.annotator.endpoint.rest.model.Task;
import app.bpartners.gen.annotator.endpoint.rest.model.UpdateTask;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

@OpenapiGenerated
public class UserTasksApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public UserTasksApi() {
    this(new ApiClient());
  }

  public UserTasksApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response)
      throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * annotates a task and sets the task status to COMPLETED
   *
   * @param userId (required)
   * @param taskId (required)
   * @param annotationBatchId (required)
   * @param annotationBatch (optional)
   * @return AnnotationBatch
   * @throws ApiException if fails to make API call
   */
  public AnnotationBatch annotateAndCompleteTask(
      String userId, String taskId, String annotationBatchId, AnnotationBatch annotationBatch)
      throws ApiException {
    ApiResponse<AnnotationBatch> localVarResponse =
        annotateAndCompleteTaskWithHttpInfo(userId, taskId, annotationBatchId, annotationBatch);
    return localVarResponse.getData();
  }

  /**
   * annotates a task and sets the task status to COMPLETED
   *
   * @param userId (required)
   * @param taskId (required)
   * @param annotationBatchId (required)
   * @param annotationBatch (optional)
   * @return ApiResponse&lt;AnnotationBatch&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AnnotationBatch> annotateAndCompleteTaskWithHttpInfo(
      String userId, String taskId, String annotationBatchId, AnnotationBatch annotationBatch)
      throws ApiException {
    HttpRequest.Builder localVarRequestBuilder =
        annotateAndCompleteTaskRequestBuilder(userId, taskId, annotationBatchId, annotationBatch);
    try {
      HttpResponse<InputStream> localVarResponse =
          memberVarHttpClient.send(
              localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode() / 100 != 2) {
          throw getApiException("annotateAndCompleteTask", localVarResponse);
        }
        return new ApiResponse<AnnotationBatch>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            localVarResponse.body() == null
                ? null
                : memberVarObjectMapper.readValue(
                    localVarResponse.body(),
                    new TypeReference<AnnotationBatch>() {}) // closes the InputStream
            );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder annotateAndCompleteTaskRequestBuilder(
      String userId, String taskId, String annotationBatchId, AnnotationBatch annotationBatch)
      throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'userId' when calling annotateAndCompleteTask");
    }
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'taskId' when calling annotateAndCompleteTask");
    }
    // verify the required parameter 'annotationBatchId' is set
    if (annotationBatchId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'annotationBatchId' when calling"
              + " annotateAndCompleteTask");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath =
        "/users/{userId}/tasks/{taskId}/annotations/{annotationBatchId}"
            .replace("{userId}", ApiClient.urlEncode(userId.toString()))
            .replace("{taskId}", ApiClient.urlEncode(taskId.toString()))
            .replace("{annotationBatchId}", ApiClient.urlEncode(annotationBatchId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(annotationBatch);
      localVarRequestBuilder.method(
          "PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * get a job task
   *
   * @param teamId (required)
   * @param jobId (required)
   * @return Task
   * @throws ApiException if fails to make API call
   */
  public Task getUserTaskByJob(String teamId, String jobId) throws ApiException {
    ApiResponse<Task> localVarResponse = getUserTaskByJobWithHttpInfo(teamId, jobId);
    return localVarResponse.getData();
  }

  /**
   * get a job task
   *
   * @param teamId (required)
   * @param jobId (required)
   * @return ApiResponse&lt;Task&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Task> getUserTaskByJobWithHttpInfo(String teamId, String jobId)
      throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getUserTaskByJobRequestBuilder(teamId, jobId);
    try {
      HttpResponse<InputStream> localVarResponse =
          memberVarHttpClient.send(
              localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode() / 100 != 2) {
          throw getApiException("getUserTaskByJob", localVarResponse);
        }
        return new ApiResponse<Task>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            localVarResponse.body() == null
                ? null
                : memberVarObjectMapper.readValue(
                    localVarResponse.body(), new TypeReference<Task>() {}) // closes the InputStream
            );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getUserTaskByJobRequestBuilder(String teamId, String jobId)
      throws ApiException {
    // verify the required parameter 'teamId' is set
    if (teamId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'teamId' when calling getUserTaskByJob");
    }
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'jobId' when calling getUserTaskByJob");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath =
        "/teams/{teamId}/jobs/{jobId}/task"
            .replace("{teamId}", ApiClient.urlEncode(teamId.toString()))
            .replace("{jobId}", ApiClient.urlEncode(jobId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * updates a task Updatable fields are status and userId when updated task status is under
   * completion or completed then there must be an userId when updated task status is pending,
   * userId must be null
   *
   * @param teamId (required)
   * @param jobId (required)
   * @param taskId (required)
   * @param updateTask (optional)
   * @return Task
   * @throws ApiException if fails to make API call
   */
  public Task updateTask(String teamId, String jobId, String taskId, UpdateTask updateTask)
      throws ApiException {
    ApiResponse<Task> localVarResponse = updateTaskWithHttpInfo(teamId, jobId, taskId, updateTask);
    return localVarResponse.getData();
  }

  /**
   * updates a task Updatable fields are status and userId when updated task status is under
   * completion or completed then there must be an userId when updated task status is pending,
   * userId must be null
   *
   * @param teamId (required)
   * @param jobId (required)
   * @param taskId (required)
   * @param updateTask (optional)
   * @return ApiResponse&lt;Task&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Task> updateTaskWithHttpInfo(
      String teamId, String jobId, String taskId, UpdateTask updateTask) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder =
        updateTaskRequestBuilder(teamId, jobId, taskId, updateTask);
    try {
      HttpResponse<InputStream> localVarResponse =
          memberVarHttpClient.send(
              localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode() / 100 != 2) {
          throw getApiException("updateTask", localVarResponse);
        }
        return new ApiResponse<Task>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            localVarResponse.body() == null
                ? null
                : memberVarObjectMapper.readValue(
                    localVarResponse.body(), new TypeReference<Task>() {}) // closes the InputStream
            );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateTaskRequestBuilder(
      String teamId, String jobId, String taskId, UpdateTask updateTask) throws ApiException {
    // verify the required parameter 'teamId' is set
    if (teamId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'teamId' when calling updateTask");
    }
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(400, "Missing the required parameter 'jobId' when calling updateTask");
    }
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'taskId' when calling updateTask");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath =
        "/teams/{teamId}/jobs/{jobId}/tasks/{taskId}"
            .replace("{teamId}", ApiClient.urlEncode(teamId.toString()))
            .replace("{jobId}", ApiClient.urlEncode(jobId.toString()))
            .replace("{taskId}", ApiClient.urlEncode(taskId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateTask);
      localVarRequestBuilder.method(
          "PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
