/*
 * Image Annotation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package app.bpartners.gen.annotator.endpoint.rest.model;

/*
 * Image Annotation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import app.bpartners.gen.annotator.endpoint.rest.OpenapiGenerated;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.io.Serializable;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Objects;
import java.util.StringJoiner;

/** AnnotationBaseFields */
@JsonPropertyOrder({
  AnnotationBaseFields.JSON_PROPERTY_ID,
  AnnotationBaseFields.JSON_PROPERTY_USER_ID,
  AnnotationBaseFields.JSON_PROPERTY_LABEL,
  AnnotationBaseFields.JSON_PROPERTY_POLYGON,
  AnnotationBaseFields.JSON_PROPERTY_COMMENT
})
@OpenapiGenerated
@SuppressWarnings("all")
public class AnnotationBaseFields implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_USER_ID = "userId";
  private String userId;

  public static final String JSON_PROPERTY_LABEL = "label";
  private Label label;

  public static final String JSON_PROPERTY_POLYGON = "polygon";
  private Polygon polygon;

  public static final String JSON_PROPERTY_COMMENT = "comment";
  private String comment;

  public AnnotationBaseFields() {}

  public AnnotationBaseFields id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   *
   * @return id
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getId() {
    return id;
  }

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }

  public AnnotationBaseFields userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   *
   * @return userId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getUserId() {
    return userId;
  }

  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserId(String userId) {
    this.userId = userId;
  }

  public AnnotationBaseFields label(Label label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   *
   * @return label
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Label getLabel() {
    return label;
  }

  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabel(Label label) {
    this.label = label;
  }

  public AnnotationBaseFields polygon(Polygon polygon) {
    this.polygon = polygon;
    return this;
  }

  /**
   * Get polygon
   *
   * @return polygon
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POLYGON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Polygon getPolygon() {
    return polygon;
  }

  @JsonProperty(JSON_PROPERTY_POLYGON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPolygon(Polygon polygon) {
    this.polygon = polygon;
  }

  public AnnotationBaseFields comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   *
   * @return comment
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getComment() {
    return comment;
  }

  @JsonProperty(JSON_PROPERTY_COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setComment(String comment) {
    this.comment = comment;
  }

  /** Return true if this AnnotationBaseFields object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnnotationBaseFields annotationBaseFields = (AnnotationBaseFields) o;
    return Objects.equals(this.id, annotationBaseFields.id)
        && Objects.equals(this.userId, annotationBaseFields.userId)
        && Objects.equals(this.label, annotationBaseFields.label)
        && Objects.equals(this.polygon, annotationBaseFields.polygon)
        && Objects.equals(this.comment, annotationBaseFields.comment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, label, polygon, comment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnnotationBaseFields {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    polygon: ").append(toIndentedString(polygon)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(
          String.format(
              "%sid%s=%s",
              prefix,
              suffix,
              URLEncoder.encode(String.valueOf(getId()), StandardCharsets.UTF_8)
                  .replaceAll("\\+", "%20")));
    }

    // add `userId` to the URL query string
    if (getUserId() != null) {
      joiner.add(
          String.format(
              "%suserId%s=%s",
              prefix,
              suffix,
              URLEncoder.encode(String.valueOf(getUserId()), StandardCharsets.UTF_8)
                  .replaceAll("\\+", "%20")));
    }

    // add `label` to the URL query string
    if (getLabel() != null) {
      joiner.add(getLabel().toUrlQueryString(prefix + "label" + suffix));
    }

    // add `polygon` to the URL query string
    if (getPolygon() != null) {
      joiner.add(getPolygon().toUrlQueryString(prefix + "polygon" + suffix));
    }

    // add `comment` to the URL query string
    if (getComment() != null) {
      joiner.add(
          String.format(
              "%scomment%s=%s",
              prefix,
              suffix,
              URLEncoder.encode(String.valueOf(getComment()), StandardCharsets.UTF_8)
                  .replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}
