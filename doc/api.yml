openapi: 3.0.3

info:
  title: geo-jobs
  description: Launch Zone Tiling Jobs (ZTJ) and Zone Detection Jobs (ZDJ).
  version: 'latest'

servers:
  - url: 'https://localhost:8080'


paths:
  '/ping':
    get:
      operationId: ping
      tags:
        - Health
      responses:
        200:
          description: pong
          content:
            text/plain:
              schema:
                type: string
                example: pong
  '/jobs/{id}/annotationProcessing':
    post:
      tags:
        - Tiling
        - Detection
      operationId: processAnnotationJob
      description: |
        Send jobs tiles to bpartners-annotator.
        In case of ZDJ, detected objects are sent with all images.
        In case of ZTJ, only images are sent with empty detected objects.
      parameters:
        - in: path
          name: id
          required: true
          description: ZTJ or ZDJ identifier
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessJobAnnotation'
      responses:
        200:
          description: The created ZTJ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotationJobProcessing"
        '500':
          $ref: '#/components/responses/500'
  '/tilingJobs/import':
    post:
      tags:
        - Tiling
      operationId: importZTJ
      description: Creates a ZTJ from an external source
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportZoneTilingJob"
      responses:
        200:
          description: The created ZTJ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZoneTilingJob"
        '500':
          $ref: '#/components/responses/500'
  '/tilingJobs':
    post:
      tags:
        - Tiling
      operationId: tileZone
      description: Creates a ZTJ
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateZoneTilingJob"
      responses:
        200:
          description: The created ZTJ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZoneTilingJob"
        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
        - Tiling
      operationId: getTilingJobs
      description: List all ZTJ
      parameters:
        - in: query
          name: page
          schema:
            $ref: "#/components/schemas/Page"
        - in: query
          name: pageSize
          schema:
            $ref: "#/components/schemas/PageSize"
      responses:
        200:
          description: All ZTJ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ZoneTilingJob"
        '500':
          $ref: '#/components/responses/500'
  '/tilingJobs/{id}/recomputedStatus':
    get:
      tags:
        - Tiling
      parameters:
        - in: path
          name: id
          required: true
          description: ZTJ identifier
          schema:
            type: string
      operationId: getRecomputedZTJStatus
      description: Get last recomputed ZTJ status while submitting new recomputing again
      responses:
        200:
          description: The recomputed status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
        '500':
          $ref: '#/components/responses/500'
  '/tilingJobs/{id}/taskStatistics':
    get:
      tags:
        - Tiling
      parameters:
        - in: path
          name: id
          required: true
          description: ZTJ identifier
          schema:
            type: string
      operationId: getTilingTaskStatistics
      description: Get tiling task statistics for a given ZTJ
      responses:
        200:
          description: List of tiling task statistics
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskStatistic"
        '500':
          $ref: '#/components/responses/500'
  '/tilingJobs/{id}/taskFiltering':
    post:
      tags:
        - Tiling
      parameters:
        - in: path
          name: id
          required: true
          description: ZTJ identifier
          schema:
            type: string
      operationId: filterTilingTasks
      description: |
        Separate SUCCEEDED tasks into new tiling job from not SUCCEEDED tasks inside another tiling job, for the given ZTJ
      responses:
        200:
          description: |
            List of new tiling jobs with its tasks statuses.
            SUCCEEDED status value means the job contains only SUCCEEDED tasks.
            NOT_SUCCEEDED status value means the job contains only not SUCCEEDED tasks, i.e FAILED or UNKNOWN
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FilteredTilingJob"
        '500':
          $ref: '#/components/responses/500'
  '/tilingJobs/{id}/duplications':
    post:
      tags:
        - Tiling
      parameters:
        - in: path
          name: id
          required: true
          description: ZTJ identifier
          schema:
            type: string
      operationId: duplicateTilingJob
      description: Duplicate existing zone tiling job with its tiling tasks and tiles
      responses:
        200:
          description: Duplicated tiling job
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZoneTilingJob"
        '500':
          $ref: '#/components/responses/500'
  '/tilingJobs/{id}/retry':
    put:
      tags:
        - Tiling
      operationId: processFailedTilingJob
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: ZTJ Identifier
          required: true
      description: Retry failed tasks for a tiling job
      responses:
        200:
          description: The ZTJ with RETRYING health and PROCESSING progression status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZoneTilingJob"
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  '/tilingJobs/{id}/parcels':
    get:
      tags:
        - Tiling
      parameters:
        - in: path
          name: id
          required: true
          description: ZTJ identifier
          schema:
            type: string
      operationId: getZTJParcels
      description: List all parcels from a ZTJ
      responses:
        200:
          description: All parcels for given ZTJ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Parcel"
        '500':
          $ref: '#/components/responses/500'

  '/detectionJobs':
    get:
      tags:
        - Detection
      operationId: getDetectionJobs
      description: List all ZDJ
      parameters:
        - in: query
          name: page
          schema:
            $ref: "#/components/schemas/Page"
        - in: query
          name: pageSize
          schema:
            $ref: "#/components/schemas/PageSize"
      responses:
        200:
          description: All ZDJ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ZoneDetectionJob"
        '500':
          $ref: '#/components/responses/500'
  '/detectionJobs/{id}/recomputedStatus':
    get:
      tags:
        - Detection
      parameters:
        - in: path
          name: id
          required: true
          description: ZDJ identifier
          schema:
            type: string
      operationId: getRecomputedZDJStatus
      description: Get last recomputed ZDJ status while submitting new recomputing again
      responses:
        200:
          description: The recomputed status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
        '500':
          $ref: '#/components/responses/500'
  '/detectionJobs/{id}/taskStatistics':
    get:
      tags:
        - Detection
      parameters:
        - in: path
          name: id
          required: true
          description: ZDJ identifier
          schema:
            type: string
      operationId: getDetectionTaskStatistics
      description: Get detection task statistics for a given ZDJ
      responses:
        200:
          description: List of detection task statistics
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskStatistic"
        '500':
          $ref: '#/components/responses/500'
  '/detectionJobs/{id}/retry':
    put:
      tags:
        - Detection
      operationId: processFailedDetectionJob
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: ZDJ Identifier
          required: true
      description: Retry failed tasks for a detection job
      responses:
        200:
          description: The ZDJ with RETRYING health and PROCESSING progression status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZoneDetectionJob"
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  '/detectionJobs/{id}/taskFiltering':
    put:
      tags:
        - Detection
      operationId: filterDetectionTasks
      description: |
        Separate SUCCEEDED tasks into new detection job from not SUCCEEDED tile detection tasks inside another detection job, for the given ZDJ
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: ZDJ Identifier
          required: true
      responses:
        200:
          description: |
            List of new detection jobs with its tasks statuses.
            SUCCEEDED status value means the job contains only SUCCEEDED tasks.
            NOT_SUCCEEDED status value means the job contains only not SUCCEEDED tasks, i.e FAILED or UNKNOWN
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FilteredDetectionJob"
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  '/detectionJobs/{id}/detectedParcels':
    get:
      tags:
        - Detection
      parameters:
        - in: path
          name: id
          required: true
          description: ZDJ identifier
          schema:
            type: string
      operationId: getZDJParcels
      description: List all detected parcels from a ZTJ
      responses:
        200:
          description: All detected parcels for given ZTJ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DetectedParcel"
        '500':
          $ref: '#/components/responses/500'
  '/detectionJobs/{id}/geojsonsUrl':
    get:
      tags:
        - Detection
      parameters:
        - in: path
          name: id
          required: true
          description: ZDJ identifier
          schema:
            type: string
      operationId: getZDJGeojsonsUrl
      description: |
        Get a secured URL to a ZIP containing the detection results as GeoJSON,
        one GeoJSON per objectType for the whole job.
      responses:
        200:
          description: Information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoJsonsUrl'
        '500':
          $ref: '#/components/responses/500'
  '/detectionJobs/{id}/process':
    post:
      tags:
        - Detection
      parameters:
        - in: path
          name: id
          required: true
          description: ZDJ identifier
          schema:
            type: string
      operationId: processZDJ
      description: Process a ZDJ
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/DetectableObjectConfiguration"
      responses:
        200:
          description: The processed (-ing) ZDJ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZoneDetectionJob"
        '500':
          $ref: '#/components/responses/500'
  '/usage':
    get:
      tags:
        - Detection
      operationId: getDetectionUsage
      summary: get detection usage for community users
      parameters:
        - in: query
          name: surfaceUnit
          required: false
          schema:
            $ref: '#/components/schemas/DetectionSurfaceUnit'
      responses:
        200:
          description: The statistics of detections usages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetectionUsage'

  '/fullDetection':
    put:
      tags:
        - Detection
      operationId: processFullDetection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFullDetection'
      responses:
        200:
          description: Zone successfully detected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullDetectedZone'
  '/parcelization':
    put:
      tags:
        - Parcelization
      parameters:
        - in: query
          name: targetZoom
          schema:
            type: integer
          required: false
        - in: query
          name: referenceZoom
          schema:
            type: integer
          required: false
        - in: query
          name: maxParcelAreaAtReferenceZoom
          schema:
            type: number
          required: false
      operationId: processParcelization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Feature'
      responses:
        '200':
          description: Zone successfully parcelized
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feature'
        '500':
          description: Internal Server Error
          $ref: '#/components/responses/500'

components:
  responses:
    400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAuthorizedException'
    404:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceNotFoundException'
    429:
      description: Too many requests to the API
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsException'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'
  schemas:
    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: InternalServerException
        message: Unexpected error
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotAuthorizedException
        message: Not authorized
    ResourceNotFoundException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: ResourceNotFoundException
        message: Resource of type <T> identified by <I> not found
    TooManyRequestsException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: TooManyRequestsException
        message: Too many requests
    Page:
      type: integer
      description: Start at `1`
    PageSize:
      type: integer
      description: Cannot exceed `500`
    CreateZoneTilingJob:
      type: object
      properties:
        emailReceiver:
          type: string
        zoneName:
          type: string
        geoServerUrl:
          type: string
        geoServerParameter:
          $ref: "#/components/schemas/GeoServerParameter"
        features:
          type: array
          items:
            $ref: "#/components/schemas/Feature"
        zoomLevel:
          type: string
          enum:
            - WORLD_0
            - WORLD_1
            - WORLD_2
            - CONTINENT_0
            - CONTINENT_1
            - COUNTRIES
            - COUNTRY
            - STATES
            - COUNTIES_0
            - COUNTIES_1
            - COUNTY
            - METROPOLITAN_AREA
            - CITIES
            - CITY
            - TOWN
            - NEIGHBORHOOD
            - STREETS
            - CITY_BLOCK
            - BUILDINGS
            - BUILDING
            - HOUSES_0
            - HOUSES_1
            - HOUSES_2
            - HOUSE_PROPERTY
    DetectionSurfaceUnit:
      type: string
      enum:
        - SQUARE_DEGREE
    DetectionSurfaceValue:
      type: object
      required:
        - value
        - unit
      properties:
        value:
          type: number
          format: double
        unit:
          $ref: '#/components/schemas/DetectionSurfaceUnit'
    DetectionUsage:
      type: object
      required:
        - totalUsedSurface
        - remainingSurface
        - lastDatetimeSurfaceUsage
        - maxAuthorizedSurface
      properties:
        maxAuthorizedSurface:
          $ref: '#/components/schemas/DetectionSurfaceValue'
        totalUsedSurface:
          $ref: '#/components/schemas/DetectionSurfaceValue'
        remainingSurface:
          $ref: '#/components/schemas/DetectionSurfaceValue'
        lastDatetimeSurfaceUsage:
          type: string
          format: date-time
    AnnotationJobProcessing:
      type: object
      properties:
        jobId:
          type: string
        jobType:
          $ref: '#/components/schemas/JobType'
        annotationWithObjectTruePositive:
          type: string
        annotationWithObjectFalsePositive:
          type: string
        annotationWithoutObjectJobId:
          type: string
        creationDatetime:
          type: string
          format: date-time
    FilteredDetectionJob:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/SuccessStatus'
        job:
          $ref: '#/components/schemas/ZoneDetectionJob'
    FilteredTilingJob:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/SuccessStatus'
        job:
          $ref: '#/components/schemas/ZoneTilingJob'
    ImportZoneTilingJob:
      type: object
      properties:
        createZoneTilingJob:
          $ref: '#/components/schemas/CreateZoneTilingJob'
        #TODO: must be oneOf but for now, only from S3 bucket is implemented
        bucketName:
          type: string
        bucketPathPrefix:
          type: string
        startFrom:
          type: number
        endAt:
          type: number
        bucketSeparator:
          $ref: '#/components/schemas/BucketSeparatorType'
    ZoneTilingJob:
      allOf:
        - $ref: "#/components/schemas/CreateZoneTilingJob"
      properties:
        id:
          type: string
        creationDatetime:
          type: string
          format: date-time
        status:
          $ref: "#/components/schemas/Status"

    CreateZoneDetectionJob:
      type: object
      properties:
        emailReceiver:
          type: string
        zoneName:
          type: string
        zoneTilingJobId:
          type: string
        type:
          $ref: '#/components/schemas/ZoneDetectionType'
        objectsToDetect:
          type: array
          items:
            $ref: "#/components/schemas/DetectableObjectConfiguration"
    ZoneDetectionJob:
      allOf:
        - $ref: "#/components/schemas/CreateZoneDetectionJob"
      properties:
        id:
          type: string
        creationDatetime:
          type: string
          format: date-time
        status:
          $ref: "#/components/schemas/Status"
    ZoneDetectionType:
      enum:
        - MACHINE
        - HUMAN
    DetectableObjectConfiguration:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/DetectableObjectType"
        confidence:
          type: number
          description: between 0 and 1
        bucketStorageName:
          type: string
          description: | 
            Bucket where are stores images to be detected. 
            If null is provided, the default apps bucket is chosen.
    DetectableObjectType:
      type: string
      enum:
        - ROOF
        - SOLAR_PANEL
        - POOL
        - PATHWAY
        - TREE
        - SIDEWALK
        - LINE
        - GREEN_SPACE
    ProcessJobAnnotation:
      type: object
      properties:
        minimumConfidence:
          type: number
          format: double
    Parcel:
      properties:
        id:
          type: string
        creationDatetime:
          type: string
          format: date-time
        feature:
          $ref: "#/components/schemas/Feature"
        tiles:
          type: array
          items:
            $ref: "#/components/schemas/Tile"
        tilingStatus:
          $ref: "#/components/schemas/Status"
    DetectedParcel:
      properties:
        id:
          type: string
        detectionJobIb:
          type: string
        parcelId:
          type: string
        creationDatetime:
          type: string
          format: date-time
        detectedTiles:
          type: array
          items:
            $ref: "#/components/schemas/DetectedTile"
        status:
          $ref: "#/components/schemas/Status"
    TaskStatistic:
      type: object
      properties:
        jobId:
          type: string
        jobType:
          $ref: '#/components/schemas/JobType'
        actualJobStatus:
          $ref: '#/components/schemas/Status'
        taskStatusStatistics:
          type: array
          items:
            $ref: '#/components/schemas/TaskStatusStatistic'
        updatedAt:
          type: string
          format: date-time
    TaskStatusStatistic:
      type: object
      properties:
        progression:
          $ref: '#/components/schemas/ProgressionStatus'
        healthStatistics:
          type: array
          items:
            $ref: '#/components/schemas/HealthStatusStatistic'
    HealthStatusStatistic:
      type: object
      properties:
        health:
          $ref: '#/components/schemas/HealthStatus'
        count:
          type: number
    SuccessStatus:
      type: string
      enum:
        - SUCCEEDED
        - NOT_SUCCEEDED
    Tile:
      properties:
        id:
          type: string
        creationDatetime:
          type: string
          format: date-time
        coordinates:
          type: object
          properties:
            x:
              type: integer
            y:
              type: integer
            z:
              type: integer
        bucketPath:
          type: string
    DetectedTile:
      properties:
        tileId:
          type: string
        creationDatetime:
          type: string
          format: date-time
        detectedObjects:
          type: array
          items:
            $ref: "#/components/schemas/DetectedObject"
        status:
          $ref: "#/components/schemas/Status"
        bucketPath:
          type: string
    DetectedObject:
      properties:
        detectedObjectType:
          $ref: "#/components/schemas/DetectableObjectType"
        feature:
          $ref: "#/components/schemas/Feature"
        confidence:
          type: number
        detectorVersion:
          type: string
    JobType:
      type: string
      enum:
        - DETECTION
        - TILING
        - PARCEL_DETECTION
    ProgressionStatus:
      type: string
      enum:
        - PENDING
        - PROCESSING
        - FINISHED
    HealthStatus:
      type: string
      enum:
        - SUCCEEDED
        - FAILED
        - UNKNOWN
        - RETRYING
    Status:
      type: object
      properties:
        progression:
          type: string
          enum:
            - PENDING
            - PROCESSING
            - FINISHED
        health:
          type: string
          enum:
            - SUCCEEDED
            - FAILED
            - UNKNOWN
            - RETRYING
        creationDatetime:
          type: string
          format: date-time

    ###########################################################################################################
    ###  GeoJSON objects. Modified from: https://gist.github.com/bubbobne/fe5f2db65acf039be6a9fd92fc9c7233  ###
    ###########################################################################################################

    GeoServerParameter:
      type: object
      properties:
        service:
          type: string
        request:
          type: string
        layers:
          type: string
        styles:
          type: string
        format:
          type: string
        transparent:
          type: boolean
        version:
          type: string
        width:
          type: integer
        height:
          type: integer
        srs:
          type: string

    Feature:
      type: object
      properties:
        id:
          type: string
        zoom:
          type: integer
        geometry:
          $ref: "#/components/schemas/MultiPolygon"

    Geometry:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - Point
            - LineString
            - Polygon
            - MultiPolygon

    Point2D:
      type: array
      maxItems: 2
      minItems: 2
      items:
        type: number

    Point:
      type: object
      allOf:
        - $ref: "#/components/schemas/Geometry"
      properties:
        coordinates:
          $ref: '#/components/schemas/Point2D'

    Polygon:
      type: object
      allOf:
        - $ref: "#/components/schemas/Geometry"
      properties:
        coordinates:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/Point2D'

    MultiPolygon:
      type: object
      allOf:
        - $ref: "#/components/schemas/Geometry"
      properties:
        coordinates:
          type: array
          items:
            type: array
            items:
              type: array
              items:
                $ref: '#/components/schemas/Point2D'
    GeoJsonsUrl:
      type: object
      properties:
        url:
          type: string
        status:
          $ref: "#/components/schemas/Status"
    BucketSeparatorType:
      type: string
      enum:
        - UNDERSCORE
        - SLASH

    CreateFullDetection:
      type: object
      allOf:
        - $ref: '#/components/schemas/CreateZoneTilingJob'
      properties:
        objectType:
          $ref: '#/components/schemas/DetectableObjectType'
        confidence:
          type: number
        endToEndId:
          type: string
        bucketStorage:
          type: string
    JobTypes:
      enum:
        - MACHINE_DETECTION
        - HUMAN_DETECTION
        - TILING

    FullDetectedZone:
      type: object
      properties:
        endToEndId:
          type: string
        jobTypes:
          type: array
          items:
           $ref: '#/components/schemas/JobTypes'
        statistics:
          type: array
          items:
           $ref: '#/components/schemas/TaskStatistic'
        detectedGeojsonUrl:
           type: string