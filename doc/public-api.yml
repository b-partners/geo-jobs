openapi: 3.0.3

info:
  title: Geo Detection API
  description: |
    Detect objects on large geographic zones.
    
    # Security
    
    Get your **API key** by emailing **contact@bpartners.app**.
    All of your requests must embed your API key in the header named: **x-api-key**.
    
    # Usage
    
    Submit your detection request through `POST /detections/{id}`
    where `{id}` is yours to be created.
    
    1. If your zone is described by a **GeoJson**, then just set accordingly the `geoJsonZone` field in the payload.
    2. If your zone is described by a **Shape file**, then upload it in a second call `POST /detections/{id}/shape`.
    3. If your zone is described by a list of addresses in an **Excel file**, then upload it in a second call `POST /detections/{id}/excel`.
  version: 'latest'

servers:
  - url: 'https://detection.api.imagery.bpartners.app'

paths:
  '/usage':
    get:
      tags:
        - Detection
      operationId: getDetectionUsage
      summary: Get detection usage
      security:
        - ApiKeyAuth: []
      parameters:
        - in: query
          name: surfaceUnit
          required: false
          schema:
            $ref: '#/components/schemas/DetectionSurfaceUnit'
      responses:
        200:
          description: Statistics of detection usage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetectionUsage'
  '/detections':
    get:
      tags:
        - Detection
      operationId: getDetection
      summary: Get detections launched
      security:
        - ApiKeyAuth: []
      parameters:
        - in: query
          name: page
          schema:
            $ref: "#/components/schemas/Page"
        - in: query
          name: pageSize
          schema:
            $ref: "#/components/schemas/PageSize"
      responses:
        200:
          description: List of detections
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Detection'
  '/detections/{id}':
    get:
      tags:
        - Detection
      operationId: getProcessedDetection
      summary: View recently processed detection actual status
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Detection identifier
          required: true
      responses:
        200:
          description: Detection result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Detection'
    post:
      tags:
        - Detection
      operationId: processDetection
      summary: Process detection
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Detection identifier
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDetection'
      responses:
        200:
          description: Detection result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Detection'
  '/detections/{id}/shape':
    post:
      tags:
        - Detection
      operationId: configureDetectionShapeFile
      summary: Upload shape file to configure detection zone
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Detection identifier
          required: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: Detection with updated shape file uploaded url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Detection'
  '/detections/{id}/excel':
    post:
      tags:
        - Detection
      operationId: configureDetectionExcelFile
      summary: Upload excel file to configure detection zone
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Detection identifier
          required: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: Detection with updated excel file uploaded url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Detection'
  '/api/keys/revoke':
    delete:
      tags:
        - Security
      operationId: revokeApiKey
      summary: Revoke apiKey access
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: Statistics of detection usage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevokeApiKeyResponse'
components:
  securitySchemes:
    ApiKeyAuth:
      type: ApiKey
      in: header
      name: x-api-key
  schemas:
    Page:
      type: integer
      description: Start at `1`
    PageSize:
      type: integer
      description: Cannot exceed `500`
    GeoServerProperties:
      type: object
      properties:
        geoServerUrl:
          type: string
        geoServerParameter:
          $ref: "#/components/schemas/GeoServerParameter"
    RevokeApiKeyResponse:
      type: object
      properties:
        message:
          type: string
    DetectionSurfaceUnit:
      type: string
      enum:
        - SQUARE_DEGREE
    DetectionSurfaceValue:
      type: object
      required:
        - value
        - unit
      properties:
        value:
          type: number
          format: double
        unit:
          $ref: '#/components/schemas/DetectionSurfaceUnit'
    DetectionUsage:
      type: object
      required:
        - totalUsedSurface
        - remainingSurface
        - lastDatetimeSurfaceUsage
        - maxAuthorizedSurface
      properties:
        maxAuthorizedSurface:
          $ref: '#/components/schemas/DetectionSurfaceValue'
        totalUsedSurface:
          $ref: '#/components/schemas/DetectionSurfaceValue'
        remainingSurface:
          $ref: '#/components/schemas/DetectionSurfaceValue'
        lastDatetimeSurfaceUsage:
          type: string
          format: date-time
    StatusStatistic:
      type: object
      properties:
        progression:
          $ref: '#/components/schemas/ProgressionStatus'
        healthStatistics:
          type: array
          items:
            $ref: '#/components/schemas/HealthStatusStatistic'
    HealthStatusStatistic:
      type: object
      properties:
        health:
          $ref: '#/components/schemas/HealthStatus'
        count:
          type: number
    ProgressionStatus:
      type: string
      enum:
        - PENDING
        - PROCESSING
        - FINISHED
    HealthStatus:
      type: string
      enum:
        - SUCCEEDED
        - FAILED
        - UNKNOWN
        - RETRYING
    Status:
      type: object
      properties:
        progression:
          type: string
          enum:
            - PENDING
            - PROCESSING
            - FINISHED
        health:
          type: string
          enum:
            - SUCCEEDED
            - FAILED
            - UNKNOWN
            - RETRYING
        creationDatetime:
          type: string
          format: date-time

    ###########################################################################################################
    ###  GeoJSON objects. Modified from: https://gist.github.com/bubbobne/fe5f2db65acf039be6a9fd92fc9c7233  ###
    ###########################################################################################################

    GeoServerParameter:
      type: object
      properties:
        service:
          type: string
        request:
          type: string
        layers:
          type: string
        styles:
          type: string
        format:
          type: string
        transparent:
          type: boolean
        version:
          type: string
        width:
          type: integer
        height:
          type: integer
        srs:
          type: string
    Feature:
      type: object
      properties:
        id:
          type: string
        zoom:
          type: integer
        geometry:
          $ref: "#/components/schemas/MultiPolygon"
    Geometry:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - Point
            - LineString
            - Polygon
            - MultiPolygon
    Point2D:
      type: array
      maxItems: 2
      minItems: 2
      items:
        type: number
    Point:
      type: object
      allOf:
        - $ref: "#/components/schemas/Geometry"
      properties:
        coordinates:
          $ref: '#/components/schemas/Point2D'
    MultiPolygon:
      type: object
      allOf:
        - $ref: "#/components/schemas/Geometry"
      properties:
        coordinates:
          type: array
          items:
            type: array
            items:
              type: array
              items:
                $ref: '#/components/schemas/Point2D'
    GeoJsonsUrl:
      type: object
      properties:
        url:
          type: string
        status:
          $ref: "#/components/schemas/Status"

    ###########################################################################################################
    ###  BP Models ############################################################################################
    ###########################################################################################################

    BPToitureModel:
      type: object
      properties:
        modelName:
          type: string
          enum: [ 'BP_TOITURE' ]
          description: |
            Détection du bâti (incluant typologies de revêtements) et des mutations entre 2 millésimes d'ortho 
             - 
             EVALUATION DE L'ETAT DU BATI
        toitureRevetement:
          type: boolean
          default: true
        arbre:
          type: boolean
          default: true
        velux:
          type: boolean
          default: true
        panneauPhotovoltaique:
          type: boolean
          default: true
        moisissure:
          type: boolean
          default: true
        usure:
          type: boolean
          default: true
        fissureCassure:
          type: boolean
          default: true
        obstacle:
          type: boolean
          default: true
        cheminee:
          type: boolean
          default: true
        humidite:
          type: boolean
          default: true
        risqueFeu:
          type: boolean
          default: true
    BPLomModel:
      type: object
      properties:
        modelName:
          type: string
          enum: [ 'BP_LOM' ]
        passagePieton:
          type: boolean
          default: true
        voieCarrosable:
          type: boolean
          default: true
        trottoir:
          type: boolean
          default: true
        parking:
          type: boolean
          default: true
    BPZanModel:
      type: object
      properties:
        modelName:
          type: string
          enum: [ 'BP_ZAN' ]
        arbre:
          type: boolean
          default: true
        espaceVert:
          type: boolean
          default: true
        toiture:
          type: boolean
          default: true
        voieCarrossable:
          type: boolean
          default: true
        trottoir:
          type: boolean
          default: true
        parking:
          type: boolean
          default: true
    BPClimatResilienceModel:
      properties:
        modelName:
          type: string
          enum: [ 'BP_CLIMAT_RESILIENCE' ]
        parking:
          type: boolean
          default: true
        panneauPhotovoltaique:
          type: boolean
          default: true
        arbre:
          type: boolean
          default: true
        espaceVert:
          type: boolean
          default: true
    BPConformitePluModel:
      properties:
        modelName:
          type: string
          enum: [ 'BP_CONFORMITE_PLU' ]
        toiture:
          type: boolean
          default: true
        arbre:
          type: boolean
          default: true
        velux:
          type: boolean
          default: true
        panneauPhotovoltaique:
          type: boolean
          default: true
        espaceVert:
          type: boolean
          default: true
        piscine:
          type: boolean
          default: true
    BPTrottoirsModel:
      properties:
        modelName:
          type: string
          enum: [ 'BP_TROTTOIRS' ]
        trottoir:
          type: boolean
          default: true
        voieCarrossable:
          type: boolean
          default: true
        arbre:
          type: boolean
          default: true
        espaceVertParking:
          type: boolean
          default: true
    BPOldModel:
      properties:
        modelName:
          type: string
          enum: [ 'BP_OLD' ]
        arbre:
          type: boolean
          default: true
        espaceVert:
          type: boolean
          default: true
        toiture:
          type: boolean
          default: true
        voieCarrossable:
          type: boolean
          default: true
        trottoir:
          type: boolean
          default: true
        parking:
          type: boolean
          default: true
        risqueFeu:
          type: boolean
          default: true

    ###########################################################################################################
    ###  Detection components ############################################################################################
    ###########################################################################################################

    CreateDetection:
      type: object
      properties:
        emailReceiver:
          type: string
          description: |
            Email address that will be notified about detection steps evolution
        zoneName:
          type: string
          description: |
            Name that consumers provide to identify the zone
        geoServerProperties:
          $ref: '#/components/schemas/GeoServerProperties'
        detectableObjectModel:
          $ref: '#/components/schemas/DetectableObjectModel'
        geoJsonZone:
          type: array
          items:
            $ref: '#/components/schemas/Feature'
          description: |
            Optional. If so, must provide zone by shape or excel file through its specific endpoint.
    Detection:
      allOf:
        - $ref: '#/components/schemas/CreateDetection'
      properties:
        id:
          type: string
        step:
          $ref: '#/components/schemas/DetectionStep'
        geoJsonUrl:
          type: string
        shapeUrl:
          type: string
        excelUrl:
          type: string
    DetectionStepName:
      enum:
        - CONFIGURING
        - TILING
        - MACHINE_DETECTION
        - HUMAN_DETECTION
    DetectionStepStatistic:
      allOf:
        - $ref: '#/components/schemas/StatusStatistic'
    DetectableObjectModel:
      discriminator:
        propertyName: modelName
      oneOf:
        - $ref: '#/components/schemas/BPToitureModel'
        - $ref: '#/components/schemas/BPLomModel'
        - $ref: '#/components/schemas/BPZanModel'
    DetectionStep:
      properties:
        name:
          $ref: '#/components/schemas/DetectionStepName'
        status:
          $ref: '#/components/schemas/Status'
        statistics:
          type: array
          items:
            $ref: '#/components/schemas/DetectionStepStatistic'
        updatedAt:
          type: string
          format: date-time